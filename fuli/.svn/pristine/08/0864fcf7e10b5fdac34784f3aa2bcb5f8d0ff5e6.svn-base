package net.loyin.ctrl;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.Writer;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import jxl.common.Logger;
import net.loyin.jfinal.anatation.RouteBind;
import net.loyin.util.PropertiesContent;
import net.loyin.util.TextUtil;
import net.loyin.util.wechat.CheckingUtil;
import net.loyin.util.wechat.Constants;
import net.loyin.util.wechat.DistCnvter;
import net.loyin.util.wechat.MethodTypeUtil;
import net.loyin.util.wechat.MsgTypeUtil;
import net.loyin.util.wechat.WeChatUtil;
import net.loyin.util.wechat.bean.WeChat;
import net.loyin.util.wechat.bean.WeChatReqBean;
import net.loyin.util.wechat.bean.weixin.ArticleItem;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpException;

import com.jfinal.core.Controller;

/**
 * 微信入口
 * @author 龙影
 */
@RouteBind(path = "/Wechat")
public class WechatCtrl extends Controller {
	private static Logger log = Logger.getLogger(WechatCtrl.class);
	/** token */
	private static String TOKEN;

	public void init() {
		if (TOKEN == null)
			TOKEN = PropertiesContent.get("WEIXIN_TOKEN_WT");
	}

	/**
	 * 包括验证及接收消息
	 * 需要传递appid 如http://xxx/Wechat?id=xxxxxappid
	 */
	public void index(){
		init();
		String appid=this.getPara("appid");
		if(appid==null){
			return;
		}else if(!PropertiesContent.get("appid").equals(appid)){
			return;
		}
		String methd = this.getRequest().getMethod();
		if ("GET".equals(methd)) {
			/**
			 * 验证是否为公众平台的接口
			 */
			try {
				CheckingUtil.doCheck(this.getRequest(), this.getResponse(),
						TOKEN);
			} catch (Exception e) {
				log.debug("验证公众平台异常", e);
				this.renderNull();
			}
		}
	}

	/**
	 * 根据获取的内容进行处理(不同的类型，处理方式不同)
	 */
	public void getContent(WeChatReqBean reqBean, Writer out)
			throws JAXBException, HttpException, IOException {
		if (reqBean.getMsgType().equals(Constants.MSGTYPE_TEXT)) {
			getText(reqBean, out); // 文本消息
		} else if (reqBean.getMsgType().equals(Constants.MSGTYPE_LOCATION)) {
			getLocation(reqBean, out); // 地理位置消息
		} else if (reqBean.getMsgType().equals(Constants.MSGTYPE_IMAGE)) {
			getImg(reqBean, out); // 图片消息
		} else if (reqBean.getMsgType().equals(Constants.MSGTYPE_LINK)) {
			getLink(reqBean, out); // 链接消息
		} else if (reqBean.getMsgType().equals(Constants.MSGTYPE_EVENT)) {
			getEvent(reqBean, out); // 事件推送
		} else if (reqBean.getMsgType().equals(Constants.MSGTYPE_VOICE)) {
			getVoice(reqBean, out); // 声音消息
		} else if (reqBean.getMsgType().equals(Constants.MSGTYPE_VIDEO)) {
			getVideo(reqBean, out); // 视频消息
		} else {
			log.error("--- 未知类型：" + reqBean.getMsgType()); // 其它情况不作处理
		}
	}

	/**
	 * 文本消息请求的响应处理
	 */
	private void getText(WeChatReqBean reqBean, Writer out)
			throws JAXBException, HttpException, IOException {
		String beginCont = reqBean.getContent().trim(); // 获取文本内容
		log.info("--- message：" + beginCont + " |- from: "
				+ reqBean.getFromUserName() + " |- to: "
				+ reqBean.getToUserName());
				// 你用流量,我请客!
		if ("请客".equals(beginCont)) {
//			List<Map<String, Object>> wpList = wcPicService
//					.getByForeignId(wcKwdService.getByKwdName(beginCont, TOKEN)
//							.getKwdUuid());
//			wpList.get(0).put("titleUrl",
//					wpList.get(0).get("titleUrl") + reqBean.getFromUserName());
//			WriteXmlUtil.sendPics(reqBean, out, wpList);
			return;
		}
	}

	/**
	 * 地理位置消息请求的响应处理
	 */
	private void getLocation(WeChatReqBean reqBean, Writer out)
			throws JAXBException {
		List<Map<String, Object>> list = null;
		double shortDistance = 0;
		String orgId = "";
		for (Map<String, Object> map : list) {
			double distance = DistCnvter.getDistance(reqBean.getLocation_Y(),
					reqBean.getLocation_X(), (Double) map.get("lng"),
					(Double) map.get("lat"));
			if ((distance < shortDistance) || (shortDistance == 0)) {
				shortDistance = distance;
				orgId = map.get("org_id").toString();
			}
		}
		Map<String, Object> map =null;// ctAddressService.getByOrgId(orgId);
		List<ArticleItem> listArticleItem = new ArrayList<ArticleItem>();
		Double lng_x = (Double) map.get("lng");
		Double lat_y = (Double) map.get("lat");
		String picUrl = "http://api.map.baidu.com/staticimage?center=" + lng_x
				+ "," + lat_y
				+ "&width=640&height=320&zoom=18&dpiType=ph&markers=" + lng_x
				+ "," + lat_y;
		String titles = map.get("name").toString();
		String conts = "联系电话: " + map.get("phone_number") + "\n联系地址: "
				+ map.get("address") + "。";
		String url = "http://api.map.baidu.com/direction?origin=latlng:"
				+ reqBean.getLocation_X() + "," + reqBean.getLocation_Y()
				+ "|name:MyLocation&destination=latlng:" + lat_y + "," + lng_x
				+ "|name:" + map.get("name")
				+ "&mode=walking&region=gz&output=html&src=yizhun|weixin";
		listArticleItem.add(WeChatUtil.makeArticleItem(picUrl, titles, conts,url));
		WeChatUtil.writePicXml(reqBean, out, listArticleItem);
	}

	/**
	 * 事件推送请求的响应处理
	 */
	private void getEvent(WeChatReqBean reqBean, Writer out)
			throws JAXBException, HttpException, IOException {
		String event = reqBean.getEvent().toLowerCase();
		// 自定义菜单事件
		if (MsgTypeUtil.EVENT_CLICK.equals(event)) {
			String eventKey = reqBean.getEventKey(); // 获取自定义菜单中的key值
			log.info("--- eventKey: " + eventKey);
//			wcRcdService.save(new WcRcd(TOKEN, reqBean.getFromUserName(),
//					reqBean.getCreateTime(), menuService.getByKeywod(eventKey,
//							TOKEN).getName(), "3", ""));

					} else if (MsgTypeUtil.EVENT_UNSUBSCRIBE.equals(event)) {
		 } else {
			log.info("--->未知事件类型：" + event);
		}
	}

	/**
	 * 语音消息请求的响应处理
	 */
	private void getVoice(WeChatReqBean reqBean, Writer out)
			throws JAXBException, HttpException, IOException {
		String method = MethodTypeUtil.getMethodFlag(reqBean.getRecognition());
		log.info("--->method: " + method + " 文本:" + reqBean.getRecognition());
		if (StringUtils.isBlank(method)) {
			// 匹配不成功，没有此业务
			String picUrl = "file/options/d92b5c06-e9e5-416d-a81e-933a78fa24ee10000zhidao.png"; // 数据库只保存应用服务器下的路径：/File/xxx.jsp
			String titles = "中国电信10000|知道";
			String conts = "您查询的内容是： " + reqBean.getRecognition();
			String url = "http://10000zhidao.gd.ct10000.com/ckb/baike.do?action=search&cityId=01&q="
					+ URLEncoder.encode(conts, "gbk");
			WeChatUtil.writePicXml(reqBean, out,
					WeChatUtil.makeArticleItemList(picUrl, titles, conts, url));
		} else {
			WeChat wec =null;/* weChatService.getByFromUserName(
					reqBean.getFromUserName(), TOKEN); // 根据OpenID查找该用户的记录信息*/
			if (wec == null) {
				List<Map<String, Object>> wpList =null;/* wcPicService
						.getByForeignId(wcKwdService.getByKwdName("关联", TOKEN)
								.getKwdUuid());*/
				wpList.get(0).put(
						"titleUrl",
						wpList.get(0).get("titleUrl")
								+ reqBean.getFromUserName());
				/*NewsUtil.sendNews(reqBean, out, wpList);
				weChatService.save(new WeChat(reqBean.getCreateTime(), reqBean
						.getFromUserName(), method, TOKEN, "0"));*/
				return;
			} else if (StringUtils.isBlank(wec.getPhone())) {
				List<Map<String, Object>> wpList =null; /*wcPicService
						.getByForeignId(wcKwdService.getByKwdName("关联", TOKEN)
								.getKwdUuid());*/
				wpList.get(0).put(
						"titleUrl",
						wpList.get(0).get("titleUrl")
								+ reqBean.getFromUserName());
//				NewsUtil.sendNews(reqBean, out, wpList);
				wec.setFlag(method);
//				weChatService.update(wec);
				return;
			}
			List<Map<String, Object>> detList =null;/* wcPicService
					.getByForeignId(wcKwdService.getByKwdName(method, TOKEN)
							.getKwdUuid());*/
			detList = getDetList(method, detList);
			if (StringUtils.isNotBlank(wec.getSessionkey())) {
				// sessionkey 存在
				Long current_time = System.currentTimeMillis() / 1000
						- (30 * 60); // 获取30分钟前的时间，单位为秒
				if (wec.getCreateTime() > current_time) {
					// Sessionkey 有效
					/*QueryUtil.queryForPic(method, wec.getPhone(),
							wec.getSessionkey(), detList, reqBean, out);*/
				} else {
					// Sessionkey无效
					if (StringUtils.isNotBlank(wec.getPhone())
							&& StringUtils.isBlank(wec.getPasswd())) {
						/*LoginUtil.loginByRandom(wec, weChatService, method,
								wcMsgService.getByTokenAndFlag(TOKEN, "msg04"),
								reqBean, out); // 随机码登陆 */
					} else if (StringUtils.isNotBlank(wec.getPhone())
							&& StringUtils.isNotBlank(wec.getPasswd())) {
						/*LoginUtil.loginByLogin(wec, weChatService, method,
								detList, reqBean, out, detList); // 客户端登陆
*/					}
				}
			} else {
				// Sessionkey不存在
				if (StringUtils.isNotBlank(wec.getPhone())
						&& StringUtils.isBlank(wec.getPasswd())) {
					/*LoginUtil.loginByRandom(wec, weChatService, method,
							wcMsgService.getByTokenAndFlag(TOKEN, "msg02"),
							reqBean, out); // 随机码登陆
*/				} else if (StringUtils.isNotBlank(wec.getPhone())
						&& StringUtils.isNotBlank(wec.getPasswd())) {
					/*LoginUtil.loginByLogin(wec, weChatService, method, detList,
							reqBean, out, detList); // 客户端登陆
*/				}
			}
		}
	}

	/**
	 * 图片消息请求的响应处理
	 */
	private void getImg(WeChatReqBean reqBean, Writer out)
			throws JAXBException, HttpException, IOException {
		TextUtil.sendText(reqBean, out, "您已成功参与本活动，若中奖我们将在48小时内与您取得联系，感谢参与！");
	}

	/** 视频消息 */
	private void getVideo(WeChatReqBean reqBean, Writer out)
			throws JAXBException {
		TextUtil.sendText(reqBean, out, "谢谢");
	}

	/**
	 * 链接消息请求的响应处理
	 */
	private void getLink(WeChatReqBean reqBean, Writer out)
			throws JAXBException {
		TextUtil.sendText(reqBean, out, "谢谢");
	}

	private List<Map<String, Object>> getDetList(String method,
			List<Map<String, Object>> detList) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		for (Map<String, Object> det : detList) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("title", det.get("picTitle"));
			map.put("conts", det.get("picCont"));
			map.put("url", det.get("titleUrl"));
			map.put("pic", det.get("picUrl"));
			map.put("flag", method);
			list.add(map);
		}
		return list;
	}

	private void argDoPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		Scanner scanner = new Scanner(req.getInputStream());
		resp.setContentType("application/xml");
		resp.setCharacterEncoding("UTF-8");
		PrintWriter out = resp.getWriter();
		try {
			// 1、获取用户发送的信息
			StringBuffer sb = new StringBuffer(1000);
			InputStream is = req.getInputStream();
			byte[] bytes = new byte[4096];
			int size = 0;
			while ((size = is.read(bytes)) > 0) {
				String str = new String(bytes, 0, size, "UTF-8");
				sb.append(str);
			}
			is.close();
			// 2、解析用户的请求信息
			Unmarshaller u = JAXBContext.newInstance(WeChatReqBean.class)
					.createUnmarshaller();
			WeChatReqBean reqBean = (WeChatReqBean) u
					.unmarshal(new StringReader(sb.toString()));
			// 3、根据获取的内容进行处理
			getContent(reqBean, out);
			out.flush();
		} catch (Exception e) {
			log.error(e);
		} finally {
			if (scanner != null) {
				scanner.close();
				scanner = null;
			}
			if (out != null) {
				out.close();
				out = null;
			}
		}
	}
}
