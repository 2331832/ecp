package net.loyin.ctrl;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.loyin.jfinal.model.IdGenerater;
import net.loyin.kit.I18N;
import net.loyin.model.sys.User;
import net.loyin.util.safe.CipherUtil;

import org.apache.log4j.Logger;

import com.google.gson.Gson;
import com.jfinal.core.Controller;
import com.jfinal.plugin.activerecord.Model;
import com.jfinal.render.JsonRender;

/**
 * 基础Controller
 * @author 刘声凤
 *  2012-9-3 下午10:37:28
 */
public abstract class BaseController<M extends Model<M>> extends Controller {
	public Logger log=Logger.getLogger(getClass());
	protected static IdGenerater idGenerater=new IdGenerater();
	protected Model<M> po;
	protected Long id;
	protected Gson gson=new Gson();
	protected String tableName;
	protected Class<M> modelClass;
	protected static String tokenName="token";
	protected String ids;
	/**yyyy-MM-dd HH:mm:ss 日期时间*/
	protected static final SimpleDateFormat dateTimeFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	/**yyyy-MM-dd 日期*/
	protected static final SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
	/**yyyy年*/
	protected static final SimpleDateFormat yearFormat=new SimpleDateFormat("yyyy");
	/**MM月*/
	protected static final SimpleDateFormat monthFormat=new SimpleDateFormat("MM");
	/**dd 日*/
	protected static final SimpleDateFormat dayFormat=new SimpleDateFormat("dd");
	/**HH:mm:ss 时间*/
	protected static final SimpleDateFormat timeFormat=new SimpleDateFormat("HH:mm:ss");
	/**HH:mm 小时分钟*/
	protected static final SimpleDateFormat hmFormat=new SimpleDateFormat("HH:mm");
	/**EEE 星期*/
	protected static final SimpleDateFormat wdFormat=new SimpleDateFormat("EEE");
	/**token超时时间600s*/
	protected int tokenTout=600; 
	public void index(){
		String para=this.getPara();
		if(para!=null&&!"".equals(para))
			this.renderHTML(para);
		else{
			String gotoUrl=this.getPara("go");
			if(gotoUrl!=null&&!"".equals(gotoUrl))
			this.renderHTML(gotoUrl);
		}
	}
	public int getPageNo(){
		return this.getParaToInt("pageNo", 1);
	}
	public int getPageSize(){
		return this.getParaToInt("rows", 20);
	}
	/***
	 * 组合查询条件 支持 >,>= ,<,<=,!=,=,in,Nin,like, Llike,Rlike,Nlike,NLlike,NRlike
	 * @param where
	 * @param param
	 */
	protected void qryField(StringBuffer where,List<Object> param){
		String qryField=this.getPara("qryField");//查询字段 以逗号分隔
		if(qryField!=null&&!"".equals(qryField)){
			String[] k=qryField.split(",");
			for(String q:k){
				Object t=this.getPara(q);
				if(t!=null&&!"".equals(t)){
					where.append(" and ");
					where.append(q.split("_")[0]);
					/**生成对应字段 START*/
					if(q.endsWith("_ge")){
						where.append(" >=? ");
					}else if(q.endsWith("_gt")){
						where.append(" >? ");
					}else if(q.endsWith("_le")){
						where.append(" <=? ");
					}else if(q.endsWith("_lt")){
						where.append(" <? ");
					}else if(q.endsWith("_Nlike")||q.endsWith("_NLlike")||q.endsWith("_NRlike")){
						where.append("not like ? ");
					}else if(q.endsWith("_like")||q.endsWith("_Llike")||q.endsWith("_Rlike")){
						where.append(" like ? ");
					}else if(q.endsWith("_ne")){
						where.append(" !=? ");
					}else if(q.endsWith("_in")){
						String val=this.getPara(q);
						if(val!=null&&!"".equals(val)){
							where.append(" in ( ");
							String[] vs=val.split(",");
							for(int i=0;i<vs.length;i++){
								where.append("?");
								if(i<vs.length-1){
									where.append(",");
								}
								param.add(vs[i]);
							}
							where.append(" ) ");
						}
					}else if(q.endsWith("_Nin")){
						String val=this.getPara(q);
						if(val!=null&&!"".equals(val)){
							where.append(" not in ( '");
							String[] vs=val.split(",");
							for(int i=0;i<vs.length;i++){
								where.append("?");
								if(i<vs.length-1){
									where.append(",");
								}
								param.add(vs[i]);
							}
							where.append("' ) ");
						}
					}else{
						where.append(" =? ");
					}
					/**生成对应字段 END*/
					/**生成对应值 START*/
					if(q.endsWith("_like")){
						param.add("%"+t+"%");
					}else if(q.endsWith("_Llike")){
						param.add("%"+t);
					}else if(q.endsWith("_Rlike")){
						param.add(t+"%");
					}else  if(q.endsWith("_Nlike")){
						param.add("%"+t+"%");
					}else if(q.endsWith("_in")){
					}else if(q.endsWith("_Nin")){
					}else{
						param.add(t);
					}
					/** END*/
				}
			}
		}
	}
	/**
	 * 字段排序
	 * @param where
	 * @return boolean true:没有字段排序
	 */
	public boolean sortField(StringBuffer where) {
		String sortName = this.getPara("sort");
		String sortOrder = this.getPara("order", "desc");
		if (sortName != null&&!"".equals(sortName)) {
			where.append(" order by ");
			where.append(sortName);
			where.append(" ");
			where.append(sortOrder);
		}
		return sortName != null&&!"".equals(sortName);
	}
	/**跳转HTML视图*/
	public void renderHTML(String view) {
		if(view.endsWith(".html")){
			super.render(view);
		}else{
			super.render(view+".html");
		}
	}
	/** 获取当前系统操作人ID */
	protected Long getCurrentUserId(){
		String login_user_id=this.getCookie("login_user_id");
		login_user_id=CipherUtil.decryptData(login_user_id);
		if(login_user_id!=null){
			login_user_id=login_user_id.split("_")[1];
		}else{
			login_user_id="0";
		}
		return idGenerater.to10(login_user_id);
	}
	protected User getCurrentUser() {
		return User.dao.findById(this.getCurrentUserId());
	}
	/**从jar包获取
	 * 
	 * */
	public void renderFormJar(String view){
		
	}
	/***
	 * 
	 * @param success
	 * @param msg
	 * @param obj 数组 [0]:id [1]:tokenid
	 */
	public void rendJson_(boolean success,String msg,Object... obj){
		log.info("URL:"+this.getRequest().getRequestURL());
		Map<String,Object>json=new HashMap<String,Object>();
		json.put("success",success);
		json.put("msg",msg);
		if(obj!=null&&obj.length>0){
			json.put("obj",obj[0]);
			if(obj.length>1){
				json.put("tokenid",obj[1]);
			}
		}
		this.renderJson(json);
	}
	@Override
	public void renderJson(Object json){
		this.render(new JsonRender(json).forIE());
	}
	/**
	 * 获取国际化资源
	 * @param key 键
	 * @param defval 默认值
	 * @return
	 */
	public String getI18nText(String key,String defval){
		return I18N.getText(key, defval, this.getRequest().getLocale());
	}
	public String getIp(){
		String ip = this.getRequest().getHeader("X-Real-IP");
		if(ip==null){
			ip=this.getRequest().getRemoteAddr();
		}
		return ip;
	}
}
